#!/usr/bin/python
# Thanks: Glusk for the GREAT help
#       karapidiola for the base script

from socket import *
import hashlib
from srp import Srp
from endian import Endian


class WrspPacket:
    """A class used to forge and decode SRP-6 like packets."""
    
    def __init__(self, username, password, server, port = 3724):
        """Initialize the class"""
                
    def alchallenge_packet(self, username):
        """Create an Authorization Logon Packet."""

        packet = "\x00"  # Opcode (Auth Logon Challenge)
        packet += "\x08"  # (Error) da wireshark 
        packet += chr(30 + len(username))
        packet += "\x00\x57\x6f\x57\x00"  # Game name: <WoW>
        packet += "\x03\x03\x05"  # Version[1,2,3]: <335>
        packet += "\x34\x30"  # Build: <12340>
        packet += "\x36\x38\x78\x00"  # Platform: <x86>
        packet += "\x6e\x69\x57\x00"  # O.S. : <Win>
        packet += "\x53\x55\x6e\x65"  # Country: <enUS>
        packet += "\x3c\x00\x00\x00"  # Timezone bias: <60>
        packet += "\xc0\xa8\x01\x02"  # IP address: <192.168.1.2>
        packet += chr(len(username))  # SRP I length
        packet += username.upper()  # SRP I value
        return packet

    def alproof_packet(self, M1, A):
        """Create an Authorization Logon Proof packet.

        M1: Key generated by both client and server used to complete auth.
        A: Public ephemeral value (client generated)
            
        """

        packet = "\x01"  # Opcode (Auth Logon Proof)
        # CRC field (usually) is not checked server side so 
        # you don't need real value (annoying, sha1 files)
        crc = "\xa4\x1f\xd3\xe0\x1f\x72\x40\x46\xa7\xd2\xe7\x44\x9e\x1d\x36\xcf\xaf\x72\xa3\x3a"
        null_pad = "\x00\x00"
        for i in range(0, 32):
            packet += A[i]
        for i in range(0, 20):
            packet += M1[i]
        packet += crc
        packet += null_pad
        return packet

    def decode_packet(self, data):
        """Analyze and decode a received SRP packet."""

        opcodes = [("AUTH_LOGON_CHALLENGE", "\x00"), ("AUTH_LOGON_PROOF", "\x01")]
        srp_vals = {}
        opcode = data[0]  # Opcode of the received packet (First byte)
        if opcode == opcodes[0][1]:  # Auth Logon challenge
            srp_rcvd = {
                'error': data[1],  # (you should hope that it is always 0)
                'B': data[3:35],  # Read B and skip 1 field (Length_g)
                'g': data[36:37],  # Read g and skip 1 field (Length_n)
                'N': data[38:70],
                's': data[70:102],  # Read salt
                'crc': data[102:]  # (useless for private servers)
            }
            return srp_rcvd
        if opcode == opcodes[1][1]:
            # Auth logon proof
            pass

        # Server data


host = "54.213.244.47"
port = 3724  # 3624 is the default value
# Login data (alexlorens, lolloasd) is a testing account
user = "alexlorens"
password = "lolloasd"
I = user.upper()
p = password.upper()
mypacket = WrspPacket()
# Create socket connection and connect to the server
sck = socket(AF_INET, SOCK_STREAM)
sck.connect((host, port))
sck.send(mypacket.alchallenge_packet(I))  # Send Auth Logon Challenge
srp_rcvd = mypacket.decode_packet(sck.recv(1024))  # Read SRP value for sending Logon Proof
print srp_rcvd
csrp = Srp(srp_rcvd['N'], srp_rcvd['g'], I, p, srp_rcvd['s'], srp_rcvd['B'])
# Do some math...
A = csrp.gen_A()
u = csrp.gen_u()
S = csrp.gen_S()
K = csrp.gen_K()
M = csrp.gen_M()
# Let's send Auth Logon Proof
sck.send(mypacket.alproof_packet(M.blittle(), A.blittle()))
sck.recv(1024)
sck.send("\x10\x00\x00\x00\x00")  # Send realm list request
print (sck.recv(1024))
